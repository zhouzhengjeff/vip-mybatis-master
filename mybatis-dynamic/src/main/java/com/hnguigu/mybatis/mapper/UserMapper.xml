<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hnguigu.mybatis.mapper.UserMapper">

    <resultMap id="UserResultMap" type="User">
        <id property="id" column="user_id"/>
        <result property="name" column="user_name"/>
        <result property="password" column="user_password"/>
        <result property="salary" column="user_salary"/>
        <result property="birthday" column="user_birthday"/>
    </resultMap>

    <!--    返回主键值-->
    <!--<insert id="save" useGeneratedKeys="true" keyProperty="id" keyColumn="user_id">
        INSERT INTO MYBATIS_USER (USER_ID, USER_NAME, USER_PASSWORD, USER_SALARY, USER_BIRTHDAY)
        VALUES (NULL, #{name}, #{password}, #{salary}, #{birthday})
    </insert>-->

    <insert id="save">
        INSERT INTO MYBATIS_USER (USER_ID, USER_NAME, USER_PASSWORD, USER_SALARY, USER_BIRTHDAY)
        VALUES (NULL, #{name}, #{password}, #{salary}, #{birthday})
    </insert>

    <select id="findByQueryDTO" parameterType="com.hnguigu.mybatis.dto.UserQueryDTO" resultMap="UserResultMap">
        SELECT
        USER_ID, USER_NAME, USER_PASSWORD, USER_SALARY, USER_BIRTHDAY
        FROM MYBATIS_USER
        <where>
            <if test="name != null and '' != name">
                AND user_name like #{name}
            </if>

            <if test="minSalary != null and maxSalary == null">
                AND user_salary >= #{minSalary}
            </if>

            <if test="maxSalary != null and minSalary == null">
                AND user_salary &lt; #{maxSalary}
            </if>

            <if test="minSalary != null and maxSalary != null">
                AND user_salary between #{minSalary} and #{maxSalary}
            </if>

            <if test="birthday != null">
                AND user_birthday = #{birthday}
            </if>
        </where>
    </select>

    <select id="findById" resultMap="UserResultMap">
        SELECT USER_ID, USER_NAME, USER_PASSWORD, USER_SALARY, USER_BIRTHDAY
        FROM MYBATIS_USER
        WHERE USER_ID = #{id}
    </select>

    <update id="update">


        UPDATE MYBATIS_USER
        <set>
            <if test="name != null">
                user_name = #{name},
            </if>
            <if test="password != null">
                user_password = #{password},
            </if>
            <if test="salary != null">
                user_salary = #{salary},
            </if>
            <if test="birthday != null">
                user_birthday = #{birthday},
            </if>
        </set>
        where user_id = #{id}
    </update>


    <!--
        delete from xxx where id in (1,2,3)

        <foreach>
            collection:array 固定写法
            open：以什么开头
            close：以什么结尾
            separator：以什么分隔
            item：是遍历后的值赋值给的变量
    -->
    <delete id="deleteByIds">
        DELETE
        FROM MYBATIS_USER
        WHERE USER_ID in
        <foreach collection="array" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </delete>

    <delete id="deleteByIdList">
        DELETE
        FROM MYBATIS_USER
        WHERE USER_ID in
        <foreach collection="collection" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </delete>
</mapper>


